services:
  app:
    build:
      context: .
      dockerfile: Dockerfile # Assuming you have a Dockerfile for your Laravel app
    container_name: laravel_app
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html
    networks:
      - laravel
    depends_on:
      - db
      - redis
    ports:
      - "8080:8080"
    environment:
      - DB_CONNECTION=${DB_CONNECTION:-pgsql}
      - DB_HOST=db
      - DB_PORT=${DB_PORT:-5432}
      - DB_DATABASE=${DB_DATABASE:-proektus}
      - DB_USERNAME=${DB_USERNAME:-postgres}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      # Add other necessary environment variables from your .env file

  nginx:
    image: nginx:alpine
    container_name: laravel_nginx
    restart: unless-stopped
    ports:
      - "80:80" # Maps host port 8000 to container port 80
      - "443:443" # Maps host port 443 to container port 443
    volumes:
      - ./:/var/www/html
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./docker/certbot/conf:/etc/letsencrypt
      - ./docker/certbot/www:/var/www/certbot
    networks:
      - laravel
    depends_on:
      - app

  certbot:
    image: certbot/certbot
    container_name: laravel_certbot
    restart: unless-stopped
    volumes:
      - ./docker/certbot/conf:/etc/letsencrypt
      - ./docker/certbot/www:/var/www/certbot
    # entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - laravel

  db:
    image: postgres:16-alpine
    container_name: laravel_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_DATABASE:-proektus}
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD} # Be sure to set a password in your .env
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - laravel

  redis:
    image: redis:alpine
    container_name: laravel_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - laravel
    command: redis-server --save 60 1 --loglevel warning ${REDIS_PASSWORD:+--requirepass ${REDIS_PASSWORD}}


networks:
  laravel:
    driver: bridge

volumes:
  db_data:
    driver: local
  redis_data:
    driver: local
